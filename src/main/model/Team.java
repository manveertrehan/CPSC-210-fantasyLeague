package model;

import org.json.JSONArray;
import org.json.JSONObject;
import persistence.Writeable;

import java.util.*;

// Represents a team of players
public class Team implements Writeable {
    public List<Player> team;

    private String name;
    private int totalFantasyPoints;

    // REQUIRES: team name has a non-zero length
    // EFFECTS: constructs an empty team with no players and
    // 0 fantasy points
    public Team(String teamName) {
        team = new ArrayList<>();
        totalFantasyPoints = 0;
        this.name = teamName;
    }

    // EFFECTS: returns name of team
    public String getTeamName() {
        return name;
    }

    // EFFECTS: returns the total amount of fantasy points
    //          generated by the players on the team
    public int getTotalFantasyPoints() {
        totalFantasyPoints = 0;
        for (Player plyr : team) {
            totalFantasyPoints = totalFantasyPoints + plyr.getFantasyPoints();
        }
        return totalFantasyPoints;
    }

    // MODIFIES: this
    // EFFECTS: adds a player to a team if they are not already
    public void addPlayer(Player player) {
        if (!team.contains(player)) {
            team.add(player);
            player.setTeam(this);
        }
    }

    // MODIFIES: this
    // EFFECTS: removes player from team
    public void removePlayer(Player player) {
        team.remove(player);
    }

    // MODIFIES: this
    // EFFECTS: removes a player at given index from a team
    public void removePlayerAtIndex(int index) {
        team.remove(index);
    }

    // EFFECTS: returns the player in position i
    public Player getPlayerGivenIndex(int i) {
        return team.get(i);
    }

    // EFFECTS: returns the name of the team in position i
    public String getPlayerNameGivenIndex(int i) {
        if (i < team.size()) {
            return team.get(i).getPlayerName();
        }
        return "empty roster spot --- add more players!";
    }

    // EFFECTS: returns size of team
    public int getTeamSize() {
        return team.size();
    }

    // method taken from JsonSerializationDemo
    // EFFECTS: returns team as a JSON object
    @Override
    public JSONObject toJson() {
        JSONObject json = new JSONObject();
        json.put("name", name);
        json.put("totalFantasyPoints", totalFantasyPoints);
        json.put("players", teamToJson());
        return json;
    }

    // method taken from JsonSerializationDemo
    // EFFECTS: returns players in this team as a JSON array
    private JSONArray teamToJson() {
        JSONArray jsonArray = new JSONArray();

        for (Player p : team) {
            jsonArray.put(p.toJson());
        }

        return jsonArray;
    }

    // EFFECTS: returns an unmodifiable list of players in this team
    public List<Player> getPlayers() {
        return Collections.unmodifiableList(team);
    }
}
